java.util.concurrent

AtomicInteger等原子类，底层用了unsafe.compareAndSwap* 方法，CAS自循锁使用while循环，线程不断尝试直至成功

集合大部分不安全，只有Vector和HashTable安全，但效率低。普通集合转为安全集合用Collections.Synchronized*方法，HashSet底层是HashMap

CountDownLatch：线程数量减少为0时释放B线程

CyclicBarrier：线程数量增加为x时释放B线程

Semaphore：线程数量为x时，其他线程自循等待(不会阻塞)，直至线程数量少于x时，其他线程可进入

Synchronized：非公平锁/公平锁，可重入锁，会自动释放，不可设置超时，不可中断线程

ReentrantLock：公平锁，可重入锁，只能手动释放，可设置超时，可中断线程

ReentrantReadWriteLock：读写锁，写锁只允许一个，读锁可以并发，写写互斥，读写互斥，读读不互斥

