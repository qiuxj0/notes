1.方法区、堆所有线程共享
2.JAVA栈、本地方法栈、程序计数器，每个线程独享
3.类加载过程：
	1.Loading：获取二进制字节流，内存生成Class对象，作为方法区数据访问入口
	2.Linking：
		1.验证：验证class文件的字节流是否符合虚拟机要求，防止串改
		2.准备：为类变量分配，并且设置默认初始值，不包括final修饰的变量，因为final修饰变量在编译时就分配了值
		3.解析：将常量池的符号转换为直接引用的过程，主要针对接口、字段、类方法、接口方法、方法类型等
	3.Initialization：
		1.类加载器：根类加载器(bootstrap class loader) > 扩展类加载器(extensions class loader) > 系统类加载器(system class loader)，根类加载器无法通过代码获取，java核心类都是用根类加载器加载的，比如String。用户自己建的类都是由系统类加载器加载的。
			1.启动类加载器只加载java、javax、sun开头的包文件类
			2.扩展类加载器只加载jdk目录下的\jre\lib\ext目录文件，如果用户在此目录创建类也会被加载
			3.应用程序
		2.自定义类加载器：
			使用场景：
				1.隔离加载类
				2.修改加载类的方式
				3.扩展加载源
				4.防止源码泄露，自定义加密和解密类加载器
			自定义: 继承java.lang.ClassLoader
		3.获取类加载器：
			1.class.getClassLoader();
			2.Thread.currentThread().getContextClassLoader();
			3.ClassLoader.getSystemClassLoader()
			4.DriverManager.getCallerClassLoader()
4.双亲委派机制
	作用：避免类的重复加载，防止系统核心API类被用户篡改
	过程：底层类不会先加载，先委托父类加载器加载，一直到顶层加载器，如果父类能加载，则用父类加载的类返回，如果父类不能加载，则由子类加载
5.程序计数器(PC寄存器 Program Counter Register)
	作用：存储栈帧的下一条指令的地址
	不会被GC，也不会OOM
6.栈，由栈帧构成
	1.局部变量表
	2.操作数栈
	3.动态链接
	4.方法返回值
	slot:栈帧的局部变量表最小单位，double、long类型需要占用两个slot，其他占用一个
	局部变量表的非static方法索引第0位总是this，而static方法没有this变量，所以static方法用this关键字会编译错误