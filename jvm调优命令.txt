转载至：https://www.cnblogs.com/wxisme/p/9878494.html

【jps】
Java版的ps命令，查看java进程及其相关的信息，如果你想找到一个java进程的pid，那可以用jps命令替代linux中的ps命令了，简单而方便。

命令格式：

jps [options] [hostid]

options参数解释：

-l : 输出主类全名或jar路径
-q : 只输出LVMID
-m : 输出JVM启动时传递给main()的参数
-v : 输出JVM启动时显示指定的JVM参数
最常用示例：

1
2
3
jps -l 输出jar包路径，类全名
jps -m 输出main参数
jps -v 输出JVM参数



【jinfo】
jinfo是用来查看JVM参数和动态修改部分JVM参数的命令

命令格式：

jinfo [option] <pid>

options参数解释：

-flag <name> 打印指定名称的参数
-flag [+|-]<name> 打开或关闭参数
-flag <name>=<value> 设置参数
-flags 打印所有参数
-sysprops 打印系统配置
<no option> 打印上面两个选项
最常用示例：

其中11666为pid

查看JVM参数和系统配置

1
2
3
jinfo 11666
jinfo -flags 11666
jinfo -sysprops 11666
查看打印GC日志参数

1
2
jinfo -flag PrintGC 11666
jinfo -flag PrintGCDetails 11666


【jstat】
jstat命令是使用频率比较高的命令，主要用来查看JVM运行时的状态信息，包括内存状态、垃圾回收等。

命令格式：

jstat [option] LVMID [interval] [count]

其中LVMID是进程id，interval是打印间隔时间（毫秒），count是打印次数（默认一直打印）

option参数解释：

-class class loader的行为统计
-compiler HotSpt JIT编译器行为统计
-gc 垃圾回收堆的行为统计
-gccapacity 各个垃圾回收代容量(young,old,perm)和他们相应的空间统计
-gcutil 垃圾回收统计概述
-gccause 垃圾收集统计概述（同-gcutil），附加最近两次垃圾回收事件的原因
-gcnew 新生代行为统计
-gcnewcapacity 新生代与其相应的内存空间的统计
-gcold 年老代和永生代行为统计
-gcoldcapacity 年老代行为统计
-gcpermcapacity 永生代行为统计
-printcompilation HotSpot编译方法统计



【jstack】
jstack是用来查看JVM线程快照的命令，线程快照是当前JVM线程正在执行的方法堆栈集合。使用jstack命令可以定位线程出现长时间卡顿的原因，例如死锁，死循环等。jstack还可以查看程序崩溃时生成的core文件中的stack信息。

命令格式：

jstack [-l] <pid> (连接运行中的进程)
jstack -F [-m] [-l] <pid> (连接挂起的进程)
jstack [-m] [-l] <executable> <core> (连接core文件)
jstack [-m] [-l] [server_id@]<remote server IP or hostname> (连接远程debug服务器)

option参数解释：

-F 当使用jstack <pid>无响应时，强制输出线程堆栈。
-m 同时输出java和本地堆栈(混合模式)
-l 额外显示锁信息
常用示例：

1
jstack -l 11666 | more




【jmap】
jmap是用来生成堆dump文件和查看堆相关的各类信息的命令，例如查看finalize执行队列，heap的详细信息和使用情况。

命令格式：

jmap [option] <pid> (连接正在执行的进程)
jmap [option] <executable <core> (连接一个core文件)
jmap [option] [server_id@]<remote server IP or hostname> (链接远程服务器)

option参数解释：

<none> to print same info as Solaris pmap
-heap 打印java heap摘要
-histo[:live] 打印堆中的java对象统计信息
-clstats 打印类加载器统计信息
-finalizerinfo 打印在f-queue中等待执行finalizer方法的对象
-dump:<dump-options> 生成java堆的dump文件
　　　　　　dump-options:

　　　　　　live 只转储存活的对象，如果没有指定则转储所有对象

　　　　　　format=b 二进制格式

　　　　　　file=<file> 转储文件到 <file>

-F 强制选项
 常用示例：

1
jmap -dump:live,format=b,file=dump.hprof 11666



【jhat】
jhat是用来分析jmap生成dump文件的命令，jhat内置了应用服务器，可以通过网页查看dump文件分析结果，jhat一般是用在离线分析上。

命令格式：

1
jhat [option] [dumpfile]
option参数解释：

-stack false: 关闭对象分配调用堆栈的跟踪
-refs false: 关闭对象引用的跟踪
-port <port>: HTTP服务器端口，默认是7000
-debug <int>: debug级别
　　 0: 无debug输出

 

　　 1: Debug hprof file parsing

 

　　 2: Debug hprof file parsing, no server

 

-version 分析报告版本
常用示例：

1
jhat dump.hprof



【jconsole, jvisualvm】
除了以上所述的常用命令行工具之外还有图形化工具，使用上比较简单。在命令行下执行jconsole和jvisualvm即可