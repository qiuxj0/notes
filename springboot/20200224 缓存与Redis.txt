Springboot高级应用
	SpringBoot与缓存
		CachingProvider：定义了多个CacheManager，运行期间可以创建多个
		CacheManager：定义了多个唯一命名的Cache，一个CacheManager只能被一个CachingProvide拥有
		Cache：类似于Map的k-v结构，一个Cache只能被一个CacheManager拥有
		Entry：是Cache里的一个k-v对，类似于Map
		Expiry：缓存条目的过期时间，一旦过期不可进行任何操作。可以通过ExpiryPolicy设置
		@Cacheable：主要标注在方法上，将方法的返回结果存入缓存中，如果缓存存在结果，下次调用方法就会直接从缓存中拿
			cacheNames/value:缓存区域命名
			key：指定key值，可以用SpEl表达式，例如#id
				// #root.method：用于获取当前方法的Method实例
				// #root.target：用于获取当前方法的target实例
				// #root.caches：用于获取当前方法关联的缓存
				// #root.methodName：用于获取当前方法的名称
				// #root.targetClass：用于获取目标类类型
				// #root.args[1]：获取当前方法的第二个参数，等同于：#p1和#a1和#argumentName
			keyGenerator:key值生成器，设置自定义的key生成器，继承org.springframework.cache.interceptor.KeyGenerator
			cacheManager:缓存管理器，可以指定缓存管理器
			cacheResolver:缓存解析器，和cacheManager类似
			condition:判断条件，为true生成缓存，例如#id>1
			unless:和condition相反
			sync:异步缓存
		@CacheEvict：主要标注在方法上，删除缓存
			allEntries=true，表示全部删除，默认false
			beforeInvocation=true，表示是否在方法之前执行，默认为false
		@CachePut：保证方法被调用，结果被缓存，一般用于更新操作
			注意：如果想配合@Cacheable使用，指定的key要一致，否则会错过
		@Caching：@CachePut、@CacheEvict、@Cacheable的组合注解，用于定义多个上述注解
		@CacheConfig：作用于类上，表示对当前类中的所有方法设置相同的配置
		@EnableCaching，开启缓存注解使用
	原理：
		CacheAutoConfiguration.CacheConfigurationImportSelector导入了所有的缓存配置，其中SimpleCacheConfiguration默认生效，里面注入了ConcurrentMapCacheManager组件
			ConcurrentMapCacheManager：其中核心用了HashMap，如果获取不到缓存对象(Cache)，就会创建一个ConcurrentMapCache，数据保存在ConcurrentMap中
		运行步骤：
			1.方法运行前，会先查询Cache，按照cacheName获取，如果没有获取到会自动创建一个Cache
			2.在ConcurrentMapCache查找缓存的内容，会使用方法传入参数作为key来查询
			3.创建Cache时，会使用SimpleKeyGenerator来生成key：如果有一个参数，该参数作为key；如果有多个或没有，则创建new SimpleKey(new Object[n]);
			4.没有查询到就调用目标方法，将目标方法返回的结果放进ConcurrentMap中
		自定义KeyGenerator：在配置类中注入KeyGenerator组件即可，在@Cacheable中指定该组件的名称即可keyGenerator=""
	整合Redis
		1.引入场景启动器spring-boot-starter-data-redis
			注入了组件，RedisTemplate和StringRedisTemplate
		2.配置文件配置spring.redis.host=xxx.xxx.xxx.xxx
		3.使用RedisTemplate即可操作redis数据库
		redis默认使用jdk的序列化器，可以通过配置类注入自定义的RedisTemplate组件，RedisTemplate设置默认序列化器即可
			也可以自定义RedisCacheManager，将RedisTemplate放入进去，并注入组件即可