https://spring.io/projects/spring-cloud/ springcloud官方文档
创建工程
	1.修改file encoding
	2.Build,Execution,Deployment-Compiler-Annotation Processores-Enable annotation processing开启注解激活生效
	3.Editor-File Types把*.idea,*.impl文件过滤
	4.pom.xml配置<packaging>pom</packaging>表示父工程
<dependencyManagement>一般出现在父工程，用于锁定版本，子module不用写version。这样只需要更新父工程版本即可。注意dependencyManagement只声明不引用，真正引入版本的是子类的dependencies
mybatis.type-aliases-package: com.atguigu.springcloud.entities 可以在mapper.xml文件省略引用包
devtools：引入jar包，Compiler勾选自动编译
@RequestBody 自动将json数据装配到对象中
@EnableEurekaClient仅支持eureka的注册服务中心，@EnableDiscoveryClient支持eureka和其他的注册服务中心，如zookeeper、consul
Zookeeper搭建：
	1.引入spring-cloud-starter-zookeeper-discovery
	2.配置spring.cloud.zookeeper.connect-string=host:port
	3.开启@EnableDiscoveryClient服务发现
	4.如果报错jar包冲突，就需要在pom.xml中排除exclusions自身的Zookeeper版本，再重新引入即可
Consul:
	安装
		1.配置环境变量
		2.执行consul agent -dev，进入http://localhost:8500
	整合
		1.同上
		2.spring.cloud.consul.host/port/discovery
三个注册中心(e表示Eureka,z表示Zookeeper,c表示consul)的异同点：
	1.e、z都是JAVA语言开发的,c是go语言开发的
	2.e是AP，z、c是CP
	3.服务健康检查，e支持且可配置，z、c支持不可配置
Feign
	默认等待时间1秒，可在ribbon.ReadTimeout=连接服务器超时时间  ribbon.ConnectTimeout=调用服务器超时时间。
	日志设置：在配置类中注入Logger.Level对象即可，设置日志的打印内容。logging.level.className=debug，设置日志的打印级别
Hystrix
	@HystrixCommand(commandProperties = {@HystrixProperty(name = HystrixPropertiesManager.EXECUTION_ISOLATION_THREAD_TIMEOUT_IN_MILLISECONDS, value = "15000")}) 配置服务降级的条件
	@DefaultProperties(defaultFallback = "payment_Global_FallbackMethod") 配置在类上，表明全局类的默认处理方法，优先级小于@HystrixCommand
	HystrixCommandProperties属性配置参照：https://blog.csdn.net/acmman/article/details/100595666
Gateway
	第一种配置：
		1.配置文件配置spring.cloud.gateway.routes.id/uri/predicates=路由的id，建议配置服务名/提供服务的路由地址/断言，路径相匹配的进行路由
		2.pom.xml移除spring-boot-starter-web模块，否则会报错
	第二种配置：
		1.配置类注入RouteLocator
		2.使用RouteLocatorBuilder.route()设置网关映射，返回对象即可
	动态网关配置：
		1.配置spring.cloud.gateway.discovery.locator.enabled=true
		2.配置uri，lb://服务名，uri以lb://开头（lb代表从注册中心获取服务），后面接的就是你需要转发到的服务名称
	Predicates(spring.cloud.gateway.routes.predicates)配置：满足此配置才可访问网关地址
		1.After、Before、Between：在时间之后，时间格式用ZonedDateTime zdj = ZonedDateTime.now();获取
		2.Cookie：cookieName,Value。可以用cmd命令：curl host:port --cookie "key=value"测试
		3.Header：请求头,正则表示式。可以用cmd命令：curl host:port -H "key=value"测试
		4.Host：**.qiuxj.com。可以用cmd命令：curl host:port -H "Host:www.qiuxj.com"测试
		5.Method
		6.Query：key,value。请求体必须要带的参数
	Filter(spring.cloud.gateway.routes.filters)
		1.生命周期，pre和post
		2.GatewayFilter和GlobalFilter
			1.实现GlobalFilter接口，实现类@Component注入容器
			2.使用ServerWebExchange取出httpServletRequest对象进行校验。return chain.filter(exchange);校验通过，exchange.getResponse().setComplete();返回指定状态
Config
	服务端：
		1.添加spring-cloud-config-server包
		2.配置文件设置git.hub地址和label
		3.@EnableConfigServer，即可访问github配置文件
	客户端：
		1.引入spring-cloud-starter-config
		2.spring.cloud.config中配置服务端的地址和配置文件信息
		3.注入服务端远程配置文件信息，可以获取值
		4.@RefreshScope，用post的请求访问host:port/actuator/refresh链接，curl -X POST 'http://localhost:3355/actuator/refresh'
Bus
	服务端：
		1.添加spring-cloud-starter-bus-amqp
		2.配置rabbitmq.host/port/username/password，和actuator的暴露服务'bus-refresh'
		3.修改github配置文件后，只要刷新服务端的host:port/actuator/bus-refresh即可刷新所有客户端
		4.host:port/actuator/bus-refresh/applicationName:port可以指定客户端刷新
	客户端：
		1.和服务端1,2相同，配置rabbitmq
Stream
	消息发送者
		1.引入spring-cloud-starter-stream-rabbit
		2.配置spring.cloud.stream.binders.defaultRabbit.type/environment服务信息和spring.cloud.stream.bindings.output通道信息
		3.定义接口和实现类，实现类定义信道（提供者）@EnableBinding(Source.class)，使用消息发送信道MessageChannel.send(MessageBuilder.withPayLoad(msg).build())发送消息到rabbitmq
	消息接收者
		1.引入生产者包
		2.yml和生产者一样，唯一区别在于output改成input
		3.新建类引入@EnableBinding(Sink.class)，方法上标注@StreamListener(Sink.INPUT)表示接受消息，使用接收的消息对象Message.getPayLoad()获取对象信息
	分组解决重复消费和持久化
		1.spring.cloud.stream.bindings.input.group设置消费者分组
		2.配置spring.cloud.stream.binders.defaultRabbit.type/environment服务信息和spring.cloud.stream.bindings.output通道信息	
Sleuth整合
	1.下载zipkin的jar包
	2.直接java -jar运行jar包
	3.打开host:9411/zipkin访问
	4.引入spring-cloud-starter-zipkin
	5.配置文件配置spring.zipkin.base-url和spring.sleuth.sample.probability设置采集率，值介于0到1之间
	6.调用后即可进入zipkin查看服务调用详细信息
SpringCloudAlibaba
	Nacos
		安装
			1.https://github.com/alibaba/nacos/releases下载nacos
			2.解压后，运行startup.cmd，访问http://localhost:8848/nacos 用户名密码：nacos/nacos
		整合
			1.引入spring-cloud-starter-alibaba-nacos-discovery
			2.spring.cloud.nacos.discovery.server-addr=
			3.@EnableDiscoveryClient
			4.内部整合了ribbon，可以直接使用@LoadBalanced调用和eureka相同
		切换模式：curl -X PUT '$NACOS_SERVER:8848/nacos/v1/ns/operator/switcher?entry=serverMode&value=CP'
		集群
			1.linux上解压nacos，nacos自带derby内嵌数据库，修改conf/application.properties更换数据库配置，mysql数据库执行sql命令文件：nacos-mysql.sql
			2.编辑cluster.conf，添加集群的多个host:port，注：一定要是hostname -i的IP，不能是127.0.0.1
			3.-p需要在startup.sh配置：while getopts加上-p，下方加上P) PORT=$OPTARG;; 。nohup $JAVA后加上 -Dserver.port=${PORT}
			4.编辑nginx.conf文件，将server里面的listner改成1111，location添加自定义的proxy_pass host:port;，添加upstream cluster{server host:port;多个}
			5.启动nacos ./startup.sh -p port 多个命令启动集群，./nginx -C nginx配置文件路径启动nginx
			
	Config
		1.spring-cloud-starter-alibaba-nacos-config
		2.spring.cloud.nacos.discovery.server-addr=，spring.cloud.nacos.config.server-addr/file-extension(文件后缀)/group/namespace=
		3.@EnableDiscoveryClient
		4.使用@Value取出配置文件的值，可不重启项目同步修改
		5.Namespace > group > dataId,可以根据spring.profiles.active= 修改配置多环境(dataId)，spring.cloud.nacos.config.group= 配置分组(group)，配置命名空间spring.cloud.nacos.config.namespace
	sentinel(替代Hystrix)
		1.下载并运行jar包，8080端口访问即可，用户名密码均为sentinel
		2.引入spring-cloud-starter-alibaba-sentinel
		3.配置spring.cloud.sentinel.transport.dashboard/port
		4.流控规则
			1.QPS：每秒访问次数，达到阈值限流（直接失败/warming up/排队）
			2.线程数：处理请求的线程总数，达到阈值限流
			3.关联：关联的资源达到阈值，限制自身
			4.预热：coldFactory冷加载默认为3，经过预热时长变为QPS阈值，可以用于秒杀活动保护系统
			5.排队
		5.降级规则
			1.RT：平均响应时间，时间超出阈值并QPS>=5，同时满足两个条件触发降级，时间窗口配置降级恢复的时间
			2.异常比例：超出降级
			3.异常数：超出降级
		6.热点规则
			1.@SentinelResource用法和@HystrixCommand一样，用于方法熔断
			2.配置热点限流规则，设置限流参数位置
			3.对访问的请求参数超过阈值，服务降级
			4.参数例外项配置：对参数的特殊值不限流或者额外限流
		7.系统规则
			1.Load:仅对Linux/Unix生效，并发线程超过系统估算量才会触发
			2.入口QPS：全局的QPS配置
			3.平均RT：
			4.并发线程数
			5.CPU使用率
		@SentinelResource的blockHandlerClass指定降级处理类，blockHandler指定处理类中的方法，blockHandler只在sentinel限流时触发，fallback在所有异常都会触发，exceptionsToIgnore异常除外
		持久化：
			1.引入sentinel-datasource-nacos
			2.配置spring.cloud.sentinel.datasource.*.nacos.server-addr(nacos地址)/data-id/group-id/data-type/rule-type，连接nacos并指定配置
			3.在nacos新建配置，data-id和group需要一致，内容配置JSON格式，其实就是sentinel的新增限流的表单元素ng-model="currentRule.grade"，
				resource-资源名称、limitApp-针对来源、grade-阈值类型、count-单机阈值、strategy-流控模式、controlBehavior-流控效果、clusterMode-是否集群
	Seata
		安装和部署
			1.修改file.conf文件，service中的vgroup_mapping.my_test_tx_group属性，修改store中的mode=db和db的配置
			2.建库，执行db_store.sql建表，1.0版本后会自动建表
			3.修改registry.conf文件，将seata注册到nacos中
		搭建环境(所有环境都需要搭建)
			1.引入seata-all，版本需要对应
			2.配置spring.cloud.alibaba.seata.tx-service-group与上述service的修改属性对应
			3.将file.conf和registry.conf复制到resources目录下
		@GlobalTransactional：放在远程调用方法总线上使用，name为上述service的修改属性，rollbackFor回滚异常类型，noRollbackFor不回滚异常类型
		TC：seata服务器，TM：@GlobalTransactional方法体-事务开启者，RM：事务参与者
雪花算法
	1.UUID.randomUUID()产生的ID无序且长，存入数据库效率低，Mysql官方推荐用短的主键
	2.replace info
	3.二进制组成：64位，第一位固定符号位，后41位表示时间戳2的41次方可以用69.73年，10位工作进程位，12位的序列号位
	4.雪花算法只需要传入workerId、datacenterId即可
	使用：
		1.引入hutool-captcha工具包
		2.Snowflake snowflake = IdUtil.createSnowflake(workerId, datacenterId) ，snowflake.nextId()